version: "3.7"

services:
  webserver:
    image: nginx:mainline-alpine
    container_name: webserver
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - web-root:/var/www/html
      - ./nginx-conf:/etc/nginx/conf.d
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
    depends_on:
      - backend
    networks:
      - app-network
  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - web-root:/var/www/html
    depends_on:
      - webserver
    command: certonly --webroot --webroot-path=/var/www/html --email admin@test-server.space --agree-tos --no-eff-email --staging -d test-server.space -d www.test-server.space
  backend:
    build:
      dockerfile: Dockerfile
      context: ./video-chat-room-backend
    image: video-chat
    container_name: video-chat
#    ports:
#      - "9910:9910"
#    expose:
#      - 9910
    restart: always
    networks:
      - app-network
#  frontend:
#    build:
#      dockerfile: Dockerfile
#      context: ./../studia-poland-webapp
#    ports:
#      - "3000:3000"
#    expose:
#      - 3000
#    restart: always
#    depends_on:
#      - backend

volumes:
  certbot-etc:
  certbot-var:
  web-root:
    driver: local
    driver_opts:
      type: none
      device: /root/projects/video-chat-rooms/views/
      o: bind

networks:
  app-network:
    driver: bridge

#https://www.digitalocean.com/community/tutorials/how-to-secure-a-containerized-node-js-application-with-nginx-let-s-encrypt-and-docker-compose